# р╕гр╕░р╕Ър╕Ър╕кр╣Бр╕Бр╕Щр╕кр╕ер╕┤р╕Ыр╣Вр╕нр╕Щр╣Ар╕Зр╕┤р╕Щ (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╣Ир╕Щ 0.3.3) р╕Ир╕▓р╕Бр╕кр╕ер╕┤р╕Ы BCEL One
import streamlit as st
import pandas as pd
import pytesseract
from PIL import Image
import numpy as np
import io
import re
import cv2
import requests
import os

# ========== CONFIG ==========
TELEGRAM_BOT_TOKEN = "р╣Гр╕кр╣Ир╣Вр╕Чр╣Ар╕Др╕Щр╕Ър╕нр╕Чр╕Вр╕нр╕Зр╕Др╕╕р╕У"
TELEGRAM_CHAT_ID = "р╣Гр╕кр╣И chat_id р╕Бр╕ер╕╕р╣Ир╕бр╕лр╕гр╕╖р╕нр╕Ър╕╕р╕Др╕Др╕е"

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": message})

def send_telegram_photo(image, caption=""):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    buffered.seek(0)
    files = {"photo": buffered}
    requests.post(url, files=files, data={"chat_id": TELEGRAM_CHAT_ID, "caption": caption})

# ========== Streamlit UI ==========
st.set_page_config(page_title="р╕гр╕░р╕Ър╕Ър╕кр╣Бр╕Бр╕Щр╕кр╕ер╕┤р╕Ыр╣Вр╕нр╕Щр╣Ар╕Зр╕┤р╕Щ", layout="wide")
st.title("р╕гр╕░р╕Ър╕Ър╕кр╣Бр╕Бр╕Щр╕кр╕ер╕┤р╕Ыр╣Вр╕нр╕Щр╣Ар╕Зр╕┤р╕Щ (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╣Ир╕Щ 0.3.3) р╕Ир╕▓р╕Бр╕кр╕ер╕┤р╕Ы BCEL One")
uploaded_files = st.file_uploader("р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕кр╕ер╕┤р╕Ыр╕ар╕▓р╕Ю (р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕лр╕ер╕▓р╕вр╣Др╕Яр╕ер╣М)", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
show_ocr = st.checkbox("р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б OCR р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф")

columns = ["Date", "Time", "Amount (LAK)", "Reference", "Sender", "Receiver"]
df_history = pd.DataFrame(columns=columns)
uploaded_hashes = set()
new_slip_count = 0

def extract_amount_region(image):
    img_np = np.array(image)
    hsv = cv2.cvtColor(img_np, cv2.COLOR_RGB2HSV)
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])
    mask = cv2.inRange(hsv, lower_red, upper_red)
    result = cv2.bitwise_and(img_np, img_np, mask=mask)
    gray = cv2.cvtColor(result, cv2.COLOR_RGB2GRAY)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return Image.fromarray(thresh)


for file in uploaded_files:
    image = Image.open(file)
    text = pytesseract.image_to_string(image, lang='eng+lao')

    red_area = extract_amount_region(image)
    red_text = pytesseract.image_to_string(red_area, config='--psm 6 digits')

    date = re.search(r"\d{2}/\d{2}/\d{2,4}", text)
    time = re.search(r"\d{2}:\d{2}:\d{2}", text)
    reference = re.search(r"\d{15,20}", text)
    sender = re.search(r"[A-Z ]+MS|MR", text)
    receiver = re.findall(r"[A-Z ]+MR|MS", text)
    qr_data = read_qr_code(np.array(image))

    amount_match = re.search(r"\d{1,3}[,\d]{0,10}", red_text)
    amount = amount_match.group().replace(",", "") if amount_match else ""

    slip_key = f"{date.group() if date else ''}-{time.group() if time else ''}-{amount}-{reference.group() if reference else ''}"
    if slip_key in uploaded_hashes:
        st.warning(f"р╕кр╕ер╕┤р╕Ыр╕Лр╣Йр╕│: {reference.group() if reference else 'N/A'}")
        send_telegram_message(f"ЁЯЪи р╕Юр╕Ър╕кр╕ер╕┤р╕Ыр╕Лр╣Йр╕│: р╣Ар╕ер╕Вр╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕З {reference.group() if reference else 'N/A'}")
        continue

    uploaded_hashes.add(slip_key)
    new_slip_count += 1

    row = {
        "Date": date.group() if date else "",
        "Time": time.group() if time else "",
        "Amount (LAK)": amount,
        "Reference": reference.group() if reference else "",
        "Sender": sender.group() if sender else "",
        "Receiver": receiver[1] if len(receiver) > 1 else "",
        "QR Data": qr_data
    }
    df_history.loc[len(df_history)] = row

    send_telegram_photo(image, caption=f"ЁЯз╛ р╕кр╕ер╕┤р╕Ыр╣Гр╕лр╕бр╣И: {reference.group() if reference else 'р╣Др╕бр╣Ир╕бр╕╡р╣Ар╕ер╕Вр╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕З'}")

    if show_ocr:
        st.subheader(f"OCR: {reference.group() if reference else 'N/A'}")
        st.code(text)

# р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕гр╕зр╕б
if not df_history.empty:
    try:
        total = df_history["Amount (LAK)"].astype(str).str.replace(",", "").astype(float).sum()
        st.success(f"р╕гр╕зр╕бр╕вр╕нр╕Фр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {int(total):,} LAK")
    except:
        st.warning("р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕зр╕бр╕вр╕нр╕Фр╣Др╕Фр╣Й р╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Зр╕┤р╕Щр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф")

    st.dataframe(df_history)

    buffer = io.BytesIO()
    df_history.to_excel(buffer, index=False)
    st.download_button("р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣М Excel", data=buffer.getvalue(), file_name="slip_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# р╣Бр╕Ир╣Йр╕З Telegram р╣Ар╕бр╕╖р╣Ир╕нр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕Др╕гр╕Ъ
if new_slip_count > 0:
    send_telegram_message(f"ЁЯУе р╕бр╕╡р╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕кр╕ер╕┤р╕Ыр╣Гр╕лр╕бр╣Ир╕Ир╕│р╕Щр╕зр╕Щ {new_slip_count} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
