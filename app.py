import streamlit as st
import pandas as pd
import pytesseract
from PIL import Image
import re
import io
import os
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", layout="wide")
st.title("üí∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")

# ‡∏ï‡∏±‡πâ‡∏á path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
@st.cache_data
def load_history():
    try:
        return pd.read_csv("upload_history.csv")
    except:
        return pd.DataFrame(columns=["Date", "Time", "Amount (LAK)", "Reference", "Ticket", "Receiver", "Text"])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô OCR ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def extract_info(image):
    text = pytesseract.image_to_string(image, lang='eng+lao')
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    date_match = re.search(r'(\d{2}/\d{2}/\d{2})', text)
    time_match = re.search(r'(\d{2}:\d{2}:\d{2})', text)
    amount_match = re.search(r'69,000|[1-9]\d{0,2}(,\d{3})*\s?LAK', text)
    ref_match = re.search(r'\b(2025\d{10,})\b', text)
    ticket_match = re.search(r'Ticket\s+([A-Z0-9]+)', text, re.IGNORECASE)
    receiver_match = re.search(r'KONGMANY SOMSAMONE MR', text, re.IGNORECASE)

    date = date_match.group(1) if date_match else ""
    time = time_match.group(1) if time_match else ""
    amount = amount_match.group(0).replace("LAK", "").strip() if amount_match else ""
    amount = re.sub(r'[^\d]', '', amount)
    reference = ref_match.group(1) if ref_match else ""
    ticket = ticket_match.group(1) if ticket_match else ""
    receiver = receiver_match.group(0).upper() if receiver_match else ""

    return {
        "Date": date,
        "Time": time,
        "Amount (LAK)": amount,
        "Reference": reference,
        "Ticket": ticket,
        "Receiver": receiver,
        "Text": text
    }

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
uploaded_files = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏†‡∏≤‡∏û (PNG, JPG)", accept_multiple_files=True, type=["png", "jpg", "jpeg"])
show_ocr = st.checkbox("üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

# ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
df_history = load_history()

new_data = []
duplicate_data = []

for uploaded_file in uploaded_files:
    image = Image.open(uploaded_file)
    info = extract_info(image)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
    is_duplicate = (
        (df_history["Date"] == info["Date"]) &
        (df_history["Time"] == info["Time"]) &
        (df_history["Amount (LAK)"] == info["Amount (LAK)"]) &
        (df_history["Ticket"] == info["Ticket"])
    ).any()

    if is_duplicate:
        duplicate_data.append(info)
    else:
        new_data.append(info)
        df_history.loc[len(df_history)] = info

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
if new_data:
    st.success(f"‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {sum(int(i['Amount (LAK)']) for i in new_data):,} LAK")
    st.subheader("‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥:")
    df_new = pd.DataFrame(new_data)
    st.dataframe(df_new)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)", df_new.to_csv(index=False).encode(), file_name="non_duplicates.csv")

if duplicate_data:
    st.error(f"üî¥ ‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(duplicate_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    st.subheader("‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥:")
    df_dup = pd.DataFrame(duplicate_data)
    st.dataframe(df_dup.style.applymap(lambda x: 'color: red', subset=pd.IndexSlice[:, ["Amount (LAK)"]]))
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡∏ã‡πâ‡∏≥)", df_dup.to_csv(index=False).encode(), file_name="duplicates.csv")

if not df_history.empty:
    st.subheader("üïì ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏•‡∏¥‡∏õ (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥):")
    st.dataframe(df_history)

# ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR
if show_ocr:
    st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û")
    for row in df_history.itertuples():
        st.text_area(f"OCR Text (Ref: {row.Reference})", row.Text, height=120)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
df_history.to_csv("upload_history.csv", index=False)
