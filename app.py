import streamlit as st
import pandas as pd
import pytesseract
from PIL import Image
import numpy as np
import io
import re
import cv2
import requests
import os
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ===== CONFIG =====
TELEGRAM_BOT_TOKEN = "7194336087:AAGSbq63qi4vpXJqZ2rwS940PVSnFWNHNtc"        # ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Telegram
TELEGRAM_CHAT_ID = "-4745577562" # ‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram
GDRIVE_FOLDER_ID = "1LdK4GBanj3EhFNfN0QcPeC7QUUGrSRNW" # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Google Drive
CREDENTIAL_JSON = "scanslipuploader-credentials.json" # credentials ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤


def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    try:
        requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": message})
    except Exception as e:
        st.error(f"‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

def send_telegram_photo(image, caption=""):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    buffered.seek(0)
    files = {"photo": buffered}
    try:
        requests.post(url, files=files, data={"chat_id": TELEGRAM_CHAT_ID, "caption": caption})
    except Exception as e:
        st.error(f"‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

def upload_to_drive(image_bytes, filename, credentials_json_path, folder_id):
    scopes = ['https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file(
        credentials_json_path,
        scopes=scopes
    )
    service = build('drive', 'v3', credentials=credentials)
    file_metadata = {'name': filename, 'parents': [folder_id]}
    media = MediaIoBaseUpload(io.BytesIO(image_bytes), mimetype='image/jpeg')
    file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    return file.get('id')

# ===== Session State =====
if "seen_slips" not in st.session_state:
    st.session_state.seen_slips = set()

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", layout="wide")
st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô 0.3.8) ‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ BCEL One")

uploaded_files = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
show_ocr = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

columns = ["Date", "Time", "Amount (LAK)", "Reference", "Sender", "Receiver", "QR Data"]
df_history = pd.DataFrame(columns=columns)

def extract_amount_region(image):
    img_np = np.array(image)
    hsv = cv2.cvtColor(img_np, cv2.COLOR_RGB2HSV)
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])
    mask = cv2.inRange(hsv, lower_red, upper_red)
    result = cv2.bitwise_and(img_np, img_np, mask=mask)
    gray = cv2.cvtColor(result, cv2.COLOR_RGB2GRAY)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return Image.fromarray(thresh)

def read_qr_code(img_np):
    return ""

for file in uploaded_files:
    image = Image.open(file)
    text = pytesseract.image_to_string(image, lang='eng+lao')
    red_area = extract_amount_region(image)
    red_text = pytesseract.image_to_string(red_area, config='--psm 6 digits')

    date = re.search(r"\d{2}/\d{2}/\d{2,4}", text)
    time = re.search(r"\d{2}:\d{2}:\d{2}", text)
    reference = re.search(r"\d{15,20}", text)
    sender = re.search(r"[A-Z ]+MS|MR", text)
    receiver = re.findall(r"[A-Z ]+MR|MS", text)
    qr_data = read_qr_code(np.array(image))
    amount_match = re.search(r"\d{1,3}(?:,\d{3})*", red_text)
    amount = amount_match.group().replace(",", "") if amount_match else ""
    slip_key = f"{date.group() if date else ''}-{time.group() if time else ''}-{amount}-{reference.group() if reference else ''}"

    if slip_key in st.session_state.seen_slips:
        st.warning(f"‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥: {reference.group() if reference else 'N/A'}")
        continue

    st.session_state.seen_slips.add(slip_key)
    row = {
        "Date": date.group() if date else "",
        "Time": time.group() if time else "",
        "Amount (LAK)": amount,
        "Reference": reference.group() if reference else "",
        "Sender": sender.group() if sender else "",
        "Receiver": receiver[1] if len(receiver) > 1 else "",
        "QR Data": qr_data
    }
    df_history.loc[len(df_history)] = row

    send_telegram_photo(image, caption=f"üßæ ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà: {reference.group() if reference else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á'}")

    # ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Google Drive
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    buffered.seek(0)
    upload_to_drive(buffered.getvalue(), file.name, CREDENTIAL_JSON, GDRIVE_FOLDER_ID)

    if show_ocr:
        st.subheader(f"OCR: {reference.group() if reference else 'N/A'}")
        st.code(text)

# ===== ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î =====
if not df_history.empty:
    try:
        total = df_history["Amount (LAK)"].astype(str).str.replace(",", "").astype(float).sum()
        st.success(f"‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {int(total):,} LAK")
    except:
        st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    st.dataframe(df_history)

    buffer = io.BytesIO()
    df_history.to_excel(buffer, index=False)
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", data=buffer.getvalue(), file_name="slip_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
