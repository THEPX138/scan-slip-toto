import streamlit as st
import pandas as pd
import pytesseract
from PIL import Image
import re
import io
import os

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path Tesseract ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö
if os.name == 'nt':  # Windows
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
else:  # Linux/Cloud
    pytesseract.pytesseract.tesseract_cmd = 'tesseract'

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ", layout="wide")
st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")

# ‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
if "history" not in st.session_state:
    st.session_state.history = []

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR
def extract_transaction_data(text):
    date_pattern = r'\d{2}/\d{2}/\d{2}'
    time_pattern = r'\d{2}:\d{2}:\d{2}'
    amount_pattern = r'69,000\s*LAK|\d{1,3}(?:,\d{3})+\s*LAK'
    ref_pattern = r'202\d{10}'
    ticket_pattern = r'[A-Z0-9]{10,}'
    receiver_pattern = r'[A-Z]+\s+[A-Z]+\s+MR'

    date = re.search(date_pattern, text)
    time = re.search(time_pattern, text)
    amount = re.search(amount_pattern, text)
    ref = re.search(ref_pattern, text)
    ticket = re.search(ticket_pattern, text)
    receiver = re.search(receiver_pattern, text)

    return {
        'Date': date.group() if date else '',
        'Time': time.group() if time else '',
        'Amount (LAK)': amount.group().replace(',', '').replace('LAK', '').strip() if amount else '',
        'Reference': ref.group() if ref else '',
        'Ticket': ticket.group() if ticket else '',
        'Receiver': receiver.group().strip() if receiver else '',
        'Text': text  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    }

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploaded_files = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏†‡∏≤‡∏û (PNG, JPG)", type=["png", "jpg", "jpeg"], accept_multiple_files=True)

# ‚úÖ OCR ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
if uploaded_files:
    new_data = []
    for file in uploaded_files:
        image = Image.open(file)
        text = pytesseract.image_to_string(image, config='--oem 3 --psm 6')
        result = extract_transaction_data(text)
        new_data.append(result)

    df_new = pd.DataFrame(new_data)
    df_new['Amount (LAK)'] = pd.to_numeric(df_new['Amount (LAK)'], errors='coerce')
    df_new = df_new.dropna(subset=['Amount (LAK)'])

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    df_history = pd.DataFrame(st.session_state.history)
    merged = df_new.merge(df_history, how='left', on=["Date", "Time", "Amount (LAK)", "Ticket"], indicator=True)

    df_not_duplicate = merged[merged['_merge'] == 'left_only'].copy()
    df_duplicate = merged[merged['_merge'] == 'both'].copy()

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    if not df_not_duplicate.empty:
        st.session_state.history.extend(df_not_duplicate[df_new.columns].to_dict(orient="records"))

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.success(f"‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {df_not_duplicate['Amount (LAK)'].sum():,.0f} LAK")

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥:")
    st.dataframe(df_not_duplicate[df_new.columns])
    buffer = io.BytesIO()
    df_not_duplicate[df_new.columns].to_excel(buffer, index=False)
    buffer.seek(0)
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)", data=buffer, file_name="not_duplicate.xlsx")

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥:")
    st.dataframe(df_duplicate[df_new.columns])
    buffer_dup = io.BytesIO()
    df_duplicate[df_new.columns].to_excel(buffer_dup, index=False)
    buffer_dup.seek(0)
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel (‡∏ã‡πâ‡∏≥)", data=buffer_dup, file_name="duplicate.xlsx")

    st.markdown("### ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏•‡∏¥‡∏õ (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥):")
    df_all = pd.DataFrame(st.session_state.history)
    st.dataframe(df_all)

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR
    with st.expander("üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR (‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"):
        for i, row in enumerate(new_data):
            st.code(row["Text"], language="text")
